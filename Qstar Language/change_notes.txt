WithControl of {gate:unitary; ctls:iter list; tg:iter; assertion:string}

let rec run_ctl_regs (ctls: iter list) (tg:iter) gate n = 
	match ctls with
	| [] -> ""
	| [{iter; starts; ends}] -> 
		if (starts=ends) then
			"c" ^ string_of_int n ^ " := !c" 
			^ string_of_int n ^ " -- (" 
			^ "cont ((" ^ run_gate gate ^ 
			^ ") (" ^ (run_range starts iter) ^
			^ (run_range tg.starts tg.iter)
			^ ") n);\n"
		else 
			"let circ_aux = ref (m_skip n) in\n"
           		 ^ "for ctl= " ^ (run_range range.starts iter)
           		 ^ " to " ^ (run_range ends iter)
           		 ^ " do\n" ^ "invariant{width !c" ^ (string_of_int n) ^ "=n}\n"
            		^ "circ_aux := !circ_aux -- (cont " ^ run_gate gate
            		^ " ctl " ^  (run_range tg.starts tg.iter)
			^ " n);\ndone;\n" ^ "c" ^ string_of_int n
            		^ " := !circ_aux -- !c" ^ string_of_int n ^ ";\n" 
	| {iter; starts; ends} :: tl ->
		if (starts=ends) then
			"c" ^ string_of_int n ^ " := !c" 
			^ string_of_int n ^ " -- (" 
			^ "cont ((" ^ run_gate gate ^ 
			^ ") (" ^ (run_range starts iter) ^
			^ (run_range tg.starts tg.iter)
			^ ") n);\n" ^ (run_ctl_regs tl tg gate n) 
		else 
			"let circ_aux = ref (m_skip n) in\n"
           		 ^ "for ctl= " ^ (run_range starts iter)
           		 ^ " to " ^ (run_range ends iter)
           		 ^ " do\n" ^ "invariant{width !c" ^ (string_of_int n) ^ "=n}\n"
            		^ "circ_aux := !circ_aux -- (cont " ^ run_gate gate
            		^ " ctl " ^  (run_range tg.starts tg.iter)
			^ " n);\ndone;\n" ^ "c" ^ string_of_int n
            		^ " := !circ_aux -- !c" ^ string_of_int n ^ ";\n" 
			^ (run_ctl_regs tl tg gate n)


