|| qft || (qreg qr)
pre {true}
	circ qr ->
        for q in range(len(qr)) {
            invariant {
                {range circ = q},
                {forall x y i. 0<= i < n -> basis_ket circ x y i = if 0<= i < q then y i else x i},
                {forall x y. ang_ind circ x y = (ind_isum(fun k -> (ind_isum (fun l -> x l * y k * power 2 (n-l - 1+k)) k n))0 q) /./ n}
            }
            H(qr[q])
            assert {
                {range circ = 1},
                {width circ = n},
                {forall x y: int->int. forall i:int. 0<=i<n ->basis_ket circ x y i = if i = q then y 0 else x i},
                {forall m:int. forall x y: int->int.   1<=m ->  ang_ind circ x y  =  (x q * y 0 * power 2 (m-1)) /./ m}
            }
            for i in range(qr[q..-1]) {
                invariant {
                    {range !c2 = 0},
                    {forall x y i. 0<= i < n -> basis_ket circ x y i = x i},
                    {forall x y. ang_ind circ x y = (ind_isum (fun l -> x l * x q * power 2 (n- l -1+ q)) (q+1) i) /./n}
                }
                with control qr[i] (RZ(i-q+1, qr[q]))
                assert {
                    {forall x y i. 0<= i < n -> basis_ket circ x y i = if i = q then y 0 else x i},
                    {forall x y. ang_ind circ x y = (ind_isum (fun l -> x l * y 0 * power 2 (n-l - 1+ q)) q n) /./ n}
                }
            }
        }
        return
pos {
    {width result = n},
    {range result = n},
    {forall x y i. 0<= i < n -> basis_ket result x y i = y i},
    {forall x y. ang_ind result x y  = (ind_isum(fun k -> (ind_isum (fun l -> x l * y k * power 2 (n-l - 1+k)) k n))0 n) /./ n}
}

