|| grover || (qreg qr, qreg aux, int iters)
pre {true}
	circ qr, aux ->
        init(qr,aux)
        assert{true}
        for i in range(iters) {
            invariant{true}
            grover_iter(qr,aux)
            assert {true}
        }
        return
pos {true}

| grover_iter | (qreg qr, qreg aux)
pre {true}
	circ qr ->
		if len(qr) == 0 {
			assert {true}
			return
		}
		else {
            oracle(qr,aux)
            diffusor(qr)
            assert{true}
        }
        return
pos {true}

| init | (qreg qr, qreg aux)
pre {true}
    circ qr, aux ->
        for q in qr[:-1] {
            invariant {true}
            H(q)
            assert {true}
        }
        X(aux)
        assert {true}
        H(aux)
        assert {true}
        return
pos {true}

# can be passed as a parameter in main function
| oracle | (qreg qr, qreg aux)
pre {true}
    circ qr -> # DEFINE P /\ (neg Q \/ R)
        return
pos {true}


| diffusor | (qreg qr, qreg aux)
pre {true}
    circ qr, aux ->
        for q in qr {
            invariant {true}
            H(q)
            assert {true}
        }
        for q in qr {
            invariant {true}
            X(q)
            assert {true}
        }
        H(qr[-1])
        assert {true}
        with control qr[:-1] (X(qr[-1]))
        assert {true}
        H(qr[-1])
        assert { true}
        for q in qr {
            invariant {true}
            X(q)
            assert {true}
        }
        for q in qr {
            invariant {true}
            H(q)
            assert { true}
        }
        return
pos {true}