|| grover || (qreg qr, qreg aux, int iters)
pre {true}
	circ qr[4], aux[1] ->
        init(qr,aux)
        assert{true}
        for i in range(iters) {
            invariant{true}
            grover_iter(qr,aux)
            assert {true}
        }
        return
pos {true}

| grover_iter | (qreg qr, qreg aux)
pre {true}
	circ qr ->
        oracle(qr,aux)
        diffusor(qr,aux)
        assert{true}
        return
pos {true}

| init | (qreg qr, qreg aux)
pre {true}
    circ qr, aux ->
        H(qr[:-1])
        X(aux)
        assert {true}
        H(aux)
        assert {true}
        return
pos {true}

# can be passed as a parameter in main function
| oracle | (qreg qr, qreg aux)
pre {true}
    circ qr -> # DEFINE P /\ (neg Q \/ R)

        return
pos {true}


| diffusor | (qreg qr, qreg aux)
pre {true}
    circ qr, aux ->
        with conjugated (H(qr)) {
            with conjugated (X(qr)) {
                with control qr[:-1] (Z(qr[-1]))
                assert {true}
            }
        }
        return
pos {true}