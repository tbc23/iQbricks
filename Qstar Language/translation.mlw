module Program

use export binary.Bit_vector
use wired_circuits.Circuit_c
use export p_int.Int_comp
use ref.Ref
use qbricks.Circuit_macros
use int.Int
use wired_circuits.Qbricks_prim
use qbricks.Circuit_semantics
use exponentiation.Int_Exponentiation
use unit_circle.Angle

let main (qr n: int): circuit
requires{0<n}
requires{qr=n}
requires{qr = 4}
requires{n>0}
=
begin
let c0 = ref (m_skip n) in
let c1 = ref (m_skip n) in
for i = 0 to (qr) do
invariant{width !c0=n}
invariant{width !c1=n}
invariant{true}
c1 := (place xx (2) n) -- !c1;
c1 := (place yy (3) n) -- !c1;
c0 := !c0 -- !c1;

done;
c0 := (place zz (0) n) -- !c0;
c0 := (place_hadamard (1) n) -- !c0;
return !c0;
ensures{vazio}
end

end
