module MAIN

use export AUX2

use export binary.Bit_vector
use wired_circuits.Circuit_c
use export p_int.Int_comp
use ref.Ref

let aux1(qr n:int): circuit
requires {n > 0}
requires {qr = n}
requires {true}
ensures {true}
ensures {width result = n}
ensures {range result = n}
=
begin
let c = ref (m_skip n) in 
return (!c)
end

let main (qr n:int): circuit
requires {n > 0}
requires {qr = n}
requires {n>0}
ensures {vazio}
ensures {width result = n}
ensures {range result = n}
=
begin
let c = ref (m_skip n) in 
let c1 = ref (m_skip n)
in if (n>0)
then begin
c1:= !c1 -- (place_hadamard (0) n);
assert{ true };
c1:= !c1 -- (place xx (0) n);
assert{ true };
c1:= !c1 -- (aux1 qr n);
c1:= !c1 -- (aux2 qr n);
end
c:= !c -- !c1;
return (!c)
end

end