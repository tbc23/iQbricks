module Program

use export binary.Bit_vector
use wired_circuits.Circuit_c
use export p_int.Int_comp
use ref.Ref

let qft (qr n: int): circuit
requires{n>0}
requires{qr=n}
=
begin
let c0 = ref (m_skip n) in
let c1 = ref (m_skip n) in
for q = 0 to (qr) do
c1 := !c1 -- (place_hadamard (q) n);
let c2 = ref (m_skip n) in
for i = q to (qr - 1) do
c2 := !c2 -- (cont (( (rz (n - i - 1)) (q) n) (i + 1) (q)));

done;
c1 := !c1 -- !c2;
assert{true}

done;
c0 := !c0 -- !c1;
return (!c0)
assert{true};
assert{true};
end
end
