module Main

use export binary.Bit_vector
use wired_circuits.Circuit_c
use export p_int.Int_comp
use ref.Ref
use qbricks.Circuit_macros
use int.Int
use reversion.Circuit_reverse
use wired_circuits.Qbricks_prim
use qbricks.Circuit_semantics
use int_expo.Int_Exponentiation
use unit_circle.Angle

let main (qr n:int) : circuit
requires{0<n}
requires{qr=n}
requires{qr = 4}
requires{n>0}
=
begin
let qr_index = ref (0: int) in 
let c0 = ref (m_skip n) in
let c1 = ref (m_skip n) in
for i = (!qr_index + 0) to ((!qr_index + qr - 2)) do
variant{(!qr_index + qr - 2) - i}
invariant{(!qr_index + 0) <= i <= (!qr_index + qr - 2)}
invariant{width !c0=n}
invariant{width !c1=n}
invariant{true}
c1 := !c1 -- (place yy (!qr_index + i) n);
c1 := !c1 -- (place xx (!qr_index + i) n);
c0 := !c0 -- !c1;
c1 := m_skip n;

done;
c0 := !c0 -- (place zz (!qr_index + 0) n);
c0 := cont ((toffoli (!qr_index + 1) (!qr_index + 2) (!qr_index + 3) n) (!qr_index + 0) 0 n) -- !c0;
return !c0;
ensures{vazio}
end

end
