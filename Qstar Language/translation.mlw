module Grover_cz

use grover.Grover
use export binary.Bit_vector
use wired_circuits.Circuit_c
use export p_int.Int_comp
use ref.Ref
use qbricks.Circuit_macros
use int.Int
use reversion.Circuit_reverse
use wired_circuits.Qbricks_prim
use qbricks.Circuit_semantics
use int_expo.Int_Exponentiation
use unit_circle.Angle

let oracle_cz (qr n:int) : circuit
requires{0<n}
requires{qr=n}
requires{true}
=
begin
let c0 = ref (m_skip n) in
c0 := !c0 -- (crz (0) (1) (1) n);
assert{true};
return !c0;
ensures{true}
end

let oracle_2 (qr n:int) : circuit
requires{0<n}
requires{qr=n}
requires{true}
=
begin
let c0 = ref (m_skip n) in
c0 := !c0 -- (crz (1) (0) (1) n);
assert{true};
return !c0;
ensures{true}
end

let grover_cz (qr aux iters n:int) : circuit
requires{0<n}
requires{qr+aux=n}
requires{true}
=
begin
let c0 = ref (m_skip n) in
c0 := !c0 -- (grover oracle_cz qr aux iters n);
return !c0;
ensures{true}
end

end
